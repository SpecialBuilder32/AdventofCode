# Advent of Code 2024

# Start Time: 12:14 AM

# Pt 1 End Time: 12:24 AM
# Pt 2 End Time: 

# Total Time: 


# Part 1 - psudorandom sequence generating
    # ..do I suspect that there is some clever math trick to make this fater than manually iterating?
    # probably. If there is I dont doubt it'll come in in part 2 though :P

seeds = []
with open("Day 22/Day22_Input.txt", "r") as f:
    for line in f.readlines():
        seeds.append(int(line))

def evolve(num: int) -> int:
    # evolves a number into its psudorandom successor
    num = mix(num, num*64)
    num = prune(num)

    num = mix(num, num//32)
    num = prune(num)

    num = mix(num, num*2048)
    num = prune(num)

    return num

def mix(into: int, num: int) -> int:
    return into^num

def prune(num: int) -> int:
    return num%16777216


# find the 2000'th number generated by each starting seed
secret_sum = 0
for seed in seeds:
    num = seed
    for _ in range(2000):
        num = evolve(num)
    secret_sum += num

print(f"sum of 2000th secret numbers is {secret_sum}")
#... this was suspiciously straightforward, even though it took 10 seconds to run